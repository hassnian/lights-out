{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flips","y","nRows","row","x","nCols","push","Math","random","chanceLightStartsOn","coord","console","log","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","makeTable","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2677e10.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps={\n    nRows:6,\n    nCols:6,\n    chanceLightStartsOn:0\n  };\n  constructor(props) {\n    super(props);\n    this.state={\n      hasWon:false,\n      board:this.createBoard(),\n      flips:0\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0;y<this.props.nRows;y++){\n      let row=[];\n      for (let x=0;x<this.props.nCols;x++){\n        row.push(Math.random()<this.props.chanceLightStartsOn)\n      }\n      board.push(row)\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(\"Flipping\",coord);\n    let {nCols, nRows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n  \n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    //Flip actual and other sides\n    flipCell(y,x)\n    flipCell(y,x+1)\n    flipCell(y,x-1)\n    flipCell(y+1,x)\n    flipCell(y-1,x)\n   \n    \n    // win when every cell is turned off\n    let hasWon = board.every(row => row.every(cell => !cell));\n    console.log(hasWon,\" is hasWOn\");\n    this.setState({ board: board, hasWon: hasWon ,flips:this.state.flips+1});\n  }\n\n\n  /** Render game board or winning message. */\n\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nRows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.nCols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  render() {\n    return(\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n            <div>\n              <p className=\"neon-blue\">Flips:  \n              <span className=\"neon-orange\">{this.state.flips}</span>\n              </p>\n              </div>\n          </div>\n          \n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n            <div>\n              <p className=\"neon-blue\">Flips counter:\n              <span className=\"neon-orange\">{this.state.flips}</span>\n              </p>\n              </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}